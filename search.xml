<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[markdown语法练习]]></title>
    <url>%2F2019%2F04%2F23%2Fmarkdown%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、标题一级标题#一级标题 二级标题 ##二级标题 三级标题###三级标题 四级标题####四级标题 五级标题#####五级标题 六级标题######六级标题 最多六级标题 二、字体加粗**加粗** 斜体 *斜体* 斜体加粗 ***斜体加粗*** 删除线 ~~删除线~~ 三、引用 引用1 引用2 引用3 123&gt;引用1&gt; &gt; 引用2&gt; &gt; &gt; 引用3 ---分隔符（三个-或以上） 四、图片和链接 百度 [百度](http://baidu.com) 百度 &lt;a href=&quot;http://baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt; 五、列表 列表内容 列表内容 列表内容 123- 列表内容+ 列表内容* 列表内容 有序列表 有序列表 121. 有序列表2. 有序列表 一级无序列表 二级无序 三级无序 12345- 一级无序列表 - 二级无序 - 三级无序 tips:一种情况是换行下来，源码模式下在-前加两个空格 另一种情况是换行下来，按tab键 六、表格 姓名 武器 排行 刘备 剑 老大 关羽 刀 老二 张飞 矛 老三 123456789101112|姓名|武器|排行||-|:-:|-:||刘备|剑|老大||关羽|刀|老二||张飞|矛|老三|tips:第一行是表头 第二行分隔表头与内容 文字默认居左 -左右都加：表示居中 -右侧加：表示居右 原生语法两边两边要用|包起来，部分编辑器不需要 七、代码行、代码块单行代码 1`单行代码` 1代码块 1​ 代码块​1tips： ```后可写语言类型，如```java然后换行，会以java的语法将关键词高亮 123456public class Test&#123; /** 示例 */ public static void main(String[] args)&#123; System.out.println("测试"); &#125;&#125; 八、流程图1234567891011121314151617181920212223242526272829303132333435363738st=&gt;start: 学生op1=&gt;operation: 闲来无事op2=&gt;operation: 放弃op3=&gt;operation: 犹豫op4=&gt;operation: 挂掉op5=&gt;operation: 稍有所成/*几率为1/100*/op7=&gt;operation: 民工op8=&gt;operation: 幸福生活op10=&gt;operation: 其他职业cond1=&gt;condition: 敲代码cond2=&gt;condition: 程序员cond3=&gt;condition: 埋头敲代码cond4=&gt;condition: 还是程序员cond5=&gt;condition: 没日没夜的敲代码cond6=&gt;condition: 有效果cond7=&gt;condition: 转行cond8=&gt;condition: 发慌e=&gt;end: 穷死st-&gt;op1-&gt;cond1cond1(yes)-&gt;cond2cond1(no)-&gt;op3cond2(yes)-&gt;cond3cond2(no)-&gt;op3(right)-&gt;cond8cond3(yes)-&gt;cond4cond3(no)-&gt;op3cond4(yes)-&gt;cond5cond4(no)-&gt;op3cond5(no)-&gt;cond6cond5(yes,right)-&gt;op4cond6(yes)-&gt;cond7cond6(no)-&gt;op5-&gt;op8cond7(yes)-&gt;econd7(no)-&gt;op7(right)-&gt;op8cond8(yes,right)-&gt;cond3cond8(no)-&gt;op2-&gt;op10-&gt;op8 12345678910111213141516171819202122232425262728293031323334353637383940​```flowst=&gt;start: 学生op1=&gt;operation: 闲来无事op2=&gt;operation: 放弃op3=&gt;operation: 犹豫op4=&gt;operation: 挂掉op5=&gt;operation: 稍有所成/*几率为1/100*/op7=&gt;operation: 民工op8=&gt;operation: 幸福生活op10=&gt;operation: 其他职业cond1=&gt;condition: 敲代码cond2=&gt;condition: 程序员cond3=&gt;condition: 埋头敲代码cond4=&gt;condition: 还是程序员cond5=&gt;condition: 没日没夜的敲代码cond6=&gt;condition: 有效果cond7=&gt;condition: 转行cond8=&gt;condition: 发慌e=&gt;end: 穷死st-&gt;op1-&gt;cond1cond1(yes)-&gt;cond2cond1(no)-&gt;op3cond2(yes)-&gt;cond3cond2(no)-&gt;op3(right)-&gt;cond8cond3(yes)-&gt;cond4cond3(no)-&gt;op3cond4(yes)-&gt;cond5cond4(no)-&gt;op3cond5(no)-&gt;cond6cond5(yes,right)-&gt;op4cond6(yes)-&gt;cond7cond6(no)-&gt;op5-&gt;op8cond7(yes)-&gt;econd7(no)-&gt;op7(right)-&gt;op8cond8(yes,right)-&gt;cond3cond8(no)-&gt;op2-&gt;op10-&gt;op8​ `]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis]]></title>
    <url>%2F2019%2F04%2F23%2Fmybatis%2F</url>
    <content type="text"><![CDATA[mybatis嵌套查询mybatis的association、collection标签实现嵌套查询的三种写法，以及传参形式下文中的SQL主要以sqlserver为例，主要关注mybatis的标签写法 1.sql连接查询，映射使用嵌套resultMap ​ dao层接口： 1List&lt;PLCParam&gt; queryPlcParam(); ​ xml里的SQL： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;resultMap type="PLCParam" id="commentResult"&gt; &lt;id property="paramId" column="param_id"/&gt; &lt;result property="stationId" column="station_id"/&gt; &lt;result property="stationName" column="station_name"/&gt; &lt;result property="pumpId" column="pump_id"/&gt; &lt;result property="vibrate" column="vibrate"/&gt; &lt;result property="temperature" column="temperature"/&gt; &lt;result property="reportTime" column="report_time" jdbcType="TIMESTAMP"/&gt; &lt;result property="rTime" column="rTime"/&gt; &lt;association property="electricity" resultMap="plcelectricityResult"/&gt; &lt;association property="voltage" resultMap="plcvoltageResult"/&gt; &lt;association property="flow" resultMap="plcflowResult"/&gt; &lt;association property="status" resultMap="plcstatusResult"/&gt; &lt;association property="plcLiquidStatus" resultMap="plcLiquidStatusResult"/&gt; &lt;association property="plcRainStatus" resultMap="plcRainStatusResult"/&gt;&lt;/resultMap&gt;&lt;!--电流表--&gt;&lt;resultMap type="PLCElectricity" id="plcelectricityResult"&gt; &lt;id property="electriId" column="electri_id"/&gt; &lt;result property="stationId" column="station_id"/&gt; &lt;result property="stationName" column="station_name"/&gt; &lt;result property="pumpId" column="pump_id"/&gt; &lt;result property="electriOne" column="electri_one"/&gt; &lt;result property="electriTwo" column="electri_two"/&gt; &lt;result property="electriThree" column="electri_three"/&gt; &lt;result property="reportTimeE" column="report_time" jdbcType="TIMESTAMP"/&gt;&lt;/resultMap&gt;&lt;!--电压表--&gt;&lt;resultMap type="PLCVoltage" id="plcvoltageResult"&gt; ...&lt;/resultMap&gt;&lt;!--flow流量表--&gt;&lt;resultMap type="PLCFlow" id="plcflowResult"&gt; ...&lt;/resultMap&gt;&lt;!--状态表--&gt;&lt;resultMap type="PLCStatus" id="plcstatusResult"&gt; ...&lt;/resultMap&gt;&lt;!--泵机基本参数--&gt;&lt;resultMap type="PlcLiquidStatus" id="plcLiquidStatusResult"&gt; ...&lt;/resultMap&gt;&lt;!--雨量表--&gt;&lt;resultMap type="PlcRainStatus" id="plcRainStatusResult"&gt; ...&lt;/resultMap&gt;&lt;select id="queryPlcParam" resultMap="commentResult"&gt; SELECT t_p.param_id,/*参数表id*/ t_p.station_id,/*泵站id*/ t_p.station_name,/*泵站名称*/ t_p.pump_id ,/*泵机id*/ t_p.vibrate,/*泵机振动*/ t_p.temperature,/*泵机温度*/ t_p.report_time,/*参数表上报时间*/ t_f.input_flow,/*进口流量*/ t_f.output_flow,/*出口流量*/ t_f.report_time,/*流量表上报时间*/ t_s.status,/*泵机状态 0:启动，1：停止，2：故障*/ t_s.last_update_time,/*最后更新时间*/ t_v.voltage_one,/*电压数据1*/ t_v.voltage_two,/*电压数据2*/ t_v.voltage_three,/*电压数据3*/ t_v.report_time,/*电压上报时间*/ t_e.electri_one,/*电流数据1*/ t_e.electri_two,/*电流数据2*/ t_e.electri_three,/*电流数据3*/ t_e.report_time/*电流上报时间*/ FROM pump_station.dbo.tb_param AS t_p LEFT JOIN pump_station.dbo.tb_flow AS t_f ON t_f.station_id = t_p.station_id AND t_f.pump_id = t_p.pump_id LEFT JOIN pump_station.dbo.tb_status AS t_s ON t_s.station_id = t_p.station_id AND t_s.pump_id = t_p.pump_id LEFT JOIN pump_station.dbo.tb_voltage AS t_v ON t_v.station_id = t_p.station_id AND t_v.pump_id = t_p.pump_id LEFT JOIN pump_station.dbo.tb_electricity AS t_e ON t_e.pump_id = t_p.pump_id AND t_e.station_id = t_p.station_id LEFT JOIN pump_station.dbo.tb_rain_status AS t_r ON t_e.pump_id = t_p.pump_id LEFT JOIN pump_station.dbo.tb_liquid_status AS t_l ON t_e.pump_id = t_p.pump_id&lt;/select&gt; ​ 实体类结构： 1234567891011121314151617181920212223242526272829303132333435363738394041/** * plc参数实体类，使用lombok工具，免写get、set、tostring等 */@Data@ToStringpublic class PLCParam implements Serializable&#123; private static final long serialVersionUID = -516318088130201395L; /**自动增长ID，数据表主键*/ private int paramId; /**泵站编号*/ private int stationId; /**泵站name*/ private String stationName; /**泵机id*/ private int pumpId; /**泵机振动 */ private String vibrate; /**泵机温度 */ private String temperature; /**上报时间*/ private Date reportTime; /**时间转换格式*/ private String rTime; /** 电流表实体 */ private PLCElectricity electricity; /** 流量表实体 */ private PLCFlow flow; /** 状态实体 */ private PLCStatus status; /** 电压表实体 */ private PLCVoltage voltage; /** 液态表实体 */ private PlcLiquidStatus plcLiquidStatus; /** 雨量表实体 */ private PlcRainStatus plcRainStatus;&#125;其他几个实体类省略 2.sql连接查询，单resultMap，直接映射多级对象​ dao层接口：同上 ​ xml里的SQL： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;resultMap type="PLCParam" id="commentResult"&gt; &lt;id property="paramId" column="param_id"/&gt; &lt;result property="stationId" column="station_id"/&gt; &lt;result property="stationName" column="station_name"/&gt; &lt;result property="pumpId" column="pump_id"/&gt; &lt;result property="vibrate" column="vibrate"/&gt; &lt;result property="temperature" column="temperature"/&gt; &lt;result property="reportTime" column="report_time" jdbcType="TIMESTAMP"/&gt; &lt;result property="rTime" column="rTime"/&gt; &lt;association property="electricity" resultMap="plcelectricityResult"&gt; &lt;id property="electriId" column="electri_id"/&gt; &lt;result property="stationId" column="station_id"/&gt; &lt;result property="stationName" column="station_name"/&gt; &lt;result property="pumpId" column="pump_id"/&gt; &lt;result property="electriOne" column="electri_one"/&gt; &lt;result property="electriTwo" column="electri_two"/&gt; &lt;result property="electriThree" column="electri_three"/&gt; &lt;result property="reportTimeE" column="report_time" jdbcType="TIMESTAMP"/&gt; &lt;/association&gt; &lt;association property="voltage" resultMap="plcvoltageResult"&gt; ... &lt;/association&gt; &lt;association property="flow" resultMap="plcflowResult"&gt; ... &lt;/association&gt; &lt;association property="status" resultMap="plcstatusResult"&gt; ... &lt;/association&gt; &lt;association property="plcLiquidStatus" resultMap="plcLiquidStatusResult"&gt; ... &lt;/association&gt; &lt;association property="plcRainStatus" resultMap="plcRainStatusResult"&gt; ... &lt;/association&gt;&lt;/resultMap&gt;&lt;select id="queryPlcParam" resultMap="commentResult"&gt; 同上&lt;/select&gt; ​ 实体类结构：同上 3.主SQL只查询主对象的字段，在主resultMap中调用其他的dao方法（注意传参问题）​ dao层接口： 1234List&lt;PipeSiteInfo&gt; getSiteInfosNew(@param("siteName")String siteName, @param("siteType")Integer siteType, @param("pageNo")Integer pageNo, @param("pageSize")Integer pageSize); ​ xml里的SQL： 12345678910111213141516171819202122232425&lt;resultMap id="SiteResultMap1" type="PipeSiteInfo"&gt; &lt;result property="siteNo" column="siteNo" jdbcType="VARCHAR"/&gt; &lt;association property="sl6512014" column="siteNo" select="com.xf.station.manager.dao.Sl6512014Dao.getLatestData"/&gt; &lt;association property="picData" column="siteNo" select="com.xf.station.manager.dao.PicDataDao.listPicData"/&gt; &lt;collection property="warningProperty" column="&#123;siteNo=siteNo,codeASCII=property&#125;" ofType="PipeWarningProperty" select="com.xf.station.network.dao.PipeWarningLogDao.getWarningAndAlarmLine" /&gt;&lt;/resultMap&gt;&lt;select id="getSiteInfosNew" parameterType="PipeSiteInfo" resultMap="SiteResultMap1"&gt; SELECT a.siteNo,a.siteName,a.siteType,a.longitude,a.latitude,a.address, a.phoneNumber,a.state,a.createTime,a.wellDeep,a.installationHeight, a.roadSubHeight,b.Type_Name siteTypeName,'Z' property FROM pipe_siteInfo a,Site_Type_Basis b WHERE a.siteType = b.Type_ID &lt;if test="siteName != null and siteName != ''"&gt; &lt;!--模糊搜索--&gt; AND concat(a.siteName,a.address) like concat('%',#&#123;siteName&#125;,'%') &lt;/if&gt; &lt;if test="siteType != null and siteType != ''"&gt; AND siteType = #&#123;siteType&#125; &lt;/if&gt; ORDER BY createTime &lt;if test="pageSize != 0"&gt; &lt;!--sqlserver分页--&gt; offset #&#123;pageNo&#125; row FETCH NEXT #&#123;pageSize&#125; row ONLY &lt;/if&gt;&lt;/select&gt; ​ 子查询接口： 12345Sl6512014 getLatestData(String siteNo);PicData listPicData(String st);List&lt;PipeWarningProperty&gt; getWarningAndAlarmLine(@Param("siteNo") String siteNo,@Param("codeASCII") String codeASCII); ​ 子查询SQL： 12345678910111213141516171819202122232425262728293031&lt;select id="getLatestData" parameterType="java.lang.String" resultMap="BaseResultMap"&gt; &lt;!--此处的BaseResultMap即数据库字段名与实体类属性名的映射，就不列出来了--&gt; SELECT top 1 serial,UT,ST,TT, AI,C,MST,PD,PJ,PT,PN01,PN05,PN10,PN30,Q,Q1,Q2,VA,VJ,VT, ISNULL(CASE WHEN Z &amp;lt; 0 THEN 0 ELSE Z END, 0) AS Z , ZB,ZT,SBL1,SBL2,pH,TURB,M10, M20,M30,M40,M50,M60,M80,M100,STT,RADIO, FL,UC,US,DO,PM25,COND,SS,CODMN,GTP,UE,REDOX,NH4N,CHLA,HNO3, ALGAE,T10,SIGNAL, LONG,LATI,ALTI,WP1,WP2,EJ,ED FROM sl651_2014 WHERE ST = #&#123;0&#125; order by TT desc&lt;/select&gt;&lt;select id="listPicData" resultType="PicData"&gt; select top 1 ID id,UT ut,ST st,TT tt,replace(PIC,'D:\RTU数据接收软件\1805\图片文件夹\','') pic,STT stt from PicData where ST = #&#123;0&#125; order by TT desc&lt;/select&gt;&lt;select id="getWarningAndAlarmLine" resultType="PipeWarningProperty"&gt; SELECT codeASCII,propertyName, MAX(CASE warningGrade WHEN 1 THEN warningValue ELSE NULL END) warningValue, MAX(CASE warningGrade WHEN 1 THEN compareWay ELSE NULL END) warningCompareWay, MAX(CASE warningGrade WHEN 2 THEN warningValue ELSE NULL END) alarmValue, MAX(CASE warningGrade WHEN 2 THEN compareWay ELSE NULL END) alarmCompareWay FROM pipe_warningLine WHERE siteNo = #&#123;siteNo&#125; &lt;if test="codeASCII != null"&gt; and codeASCII = #&#123;codeASCII&#125; &lt;/if&gt; GROUP BY codeASCII,propertyName&lt;/select&gt; ​ 实体类结构： 1234567891011121314151617181920212223242526272829303132333435@Data@AllArgsConstructor@NoArgsConstructorpublic class PipeSiteInfo extends PageUtil implements Serializable&#123; private long serial; //站点编号 private String siteNo; //站点名称 private String siteName; //站点类型 private Integer siteType; //经度 private BigDecimal longitude; //纬度 private BigDecimal latitude; //地址 private String address; //手机号 private String phoneNumber; //状态 private Integer state; //创建时间 @JSONField(format = "yyyy-MM-dd HH:mm:ss") private Date createTime; //接受时间用字符串接收 private String cTime; /** 图片信息实体类 */ private PicData picData; /** 监测数据实体类 */ private Sl6512014 sl6512014; /** 预警报警线实体类集合 */ private List&lt;PipeWarningProperty&gt; warningProperty;&#125; 前两种方式比较类似，也比较简单，主要是第三种方式，有一些注意事项。 注意事项： 第三种方式里，由于数据库字段名与实体类属性名一样的，所以resultMap里不用写每个属性的result，也能自动映射进去。但是由于下面的标签中需要用主SQL查出的siteNo，此时就要写siteNo对应的映射了，不然主实体类中siteNo属性就为空了。 传递单个参数时，标签中直接写：column=“主SQL查出来，需要传递的字段名”，与子查询的参数名无关，但数据类型要一致。 传递多个参数时，就写完整的传参形式：column={siteNo=siteNo,codeASCII=property}，其中‘=’号前面的为子查询参数名，‘=’号后面为主SQL查出的字段名。 当子查询需要传递一个常量时，可将常量写入主SQL中，用as取一个别名，再在column里传递，如下图：]]></content>
      <categories>
        <category>持久化</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>持久化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2F2019%2F04%2F20%2Fhello%2F</url>
    <content type="text"><![CDATA[hjldzst测试 我可以设置这一句的颜色哈哈]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB优化</tag>
        <tag>sql调优</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
